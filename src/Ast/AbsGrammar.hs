-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Grammar.

module AbsGrammar where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Program [Type_declaration] [Def]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type_declaration = TDecl UIdent [Type_constructor]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type_constructor = TCntr UIdent [Type]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = TBuilt UIdent | TFun Type Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Def = DDef Ident Type Ident [Ident] Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConsExp = EAtom UIdent | EConsExp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = EVar Ident
    | EInt Integer
    | EApp Exp ConsExp
    | ECons UIdent [ConsExp]
    | EMul Exp Exp
    | EDiv Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | ELt Exp Exp
    | EIf Exp Exp Exp
    | EMatch Exp [Alt]
    | EAbs Ident Type Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Alt = CAlt Pattern Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pattern = PCons UIdent [Ident]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype UIdent = UIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

