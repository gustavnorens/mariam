token UIdent (upper (letter | digit | '_')*)                            ; 

Program. Program ::= [Type_declaration] [Def]                           ;

TDecl. Type_declaration ::= "data" UIdent "=" [Type_constructor]        ;
terminator Type_declaration ""                                          ;

TCntr. Type_constructor ::= UIdent [Type]                               ;
separator Type_constructor "|"                                          ;

TBuilt. Type1 ::= UIdent                                                ;
TFun. Type ::= Type1 "->" Type                                          ;
terminator Type ""                                                      ;
coercions Type 1                                                        ;

DDef.   Def     ::= Ident "::" Type Ident [Ident] "=" Exp               ;
terminator Def ";"                                                      ;  
terminator Ident ""                                                     ;

EAtom. ConsExp    ::= UIdent                                            ;
EConsExp. ConsExp ::= Exp6                                              ;

EVar.   Exp6    ::= Ident                                               ;
EInt.   Exp6    ::= Integer                                             ;
EApp.   Exp5    ::= Exp5 ConsExp                                        ;
ECons.  Exp4    ::= UIdent [ConsExp]                                    ;
EMul.   Exp3    ::= Exp3 "*" Exp4                                       ;
EDiv.   Exp3    ::= Exp3 "/" Exp4                                       ;
EAdd.   Exp2    ::= Exp2 "+" Exp3                                       ;
ESub.   Exp2    ::= Exp2 "-" Exp3                                       ;
ELt.    Exp1    ::= Exp1 "<" Exp2                                       ;
EGt.    Exp1    ::= Exp1 ">" Exp2                                       ;
EQLt.   Exp1    ::= Exp1 "<=" Exp2                                      ;
EQGt.   Exp1    ::= Exp1 ">=" Exp2                                      ;
Neq.    Exp1    ::= Exp1 "!=" Exp2                                      ;
Eq.     Exp1    ::= Exp1 "==" Exp2                                      ;
EIf.    Exp    ::= "if" Exp "then" Exp "else" Exp                       ;
EMatch. Exp     ::= "case" Exp "of" "{" [Alt] "}"                       ;
EAbs.   Exp     ::= "\\" Ident ":" Type1 "->" Exp                       ;

coercions Exp 6                                                         ;
separator ConsExp ""                                           ;

layout "of"                                                             ;

CAlt. Alt ::= Pattern "->" Exp                                          ;
separator nonempty Alt ";"                                              ;
                                                                        ;
PCons. Pattern ::= UIdent [Ident]                                       ;
terminator Pattern "";

comment "--"                                                            ;
comment "{-" "-}"                                                       ;
