data List = Nil | Cons Int List

nestedCapture :: Int -> Int -- works as expected
nestedCapture x = (\y: Int -> (\z: Int -> x + y + z)) 10 5
;

makeAdder :: Int -> (Int -> Int) -- works as expected
makeAdder x = (\y: Int -> x + y)
;

twice :: (Int -> Int) -> Int -> Int -- works as expected
twice f x = f (f x)
;

two :: (Int -> Int) -> Int -> Int -> Int -- works as expected
two f x y = f x + f y
;

add :: Int -> Int -> Int -- works as expected
add = (\x: Int -> (\y: Int -> x + y))
;

test :: Int -- works as expected
test = add 10 5
;

main :: Int -- result should be 80
main = nestedCapture 10 + makeAdder 5 20 + twice (\x: Int -> x + 1) 3 + two (\x: Int -> x * 2) 2 3 + test
;

